# This is a basic workflow to help you get started with Actions
env: 
  dev:    "134.209.122.181"
  qa:     "134.209.122.181"
  stage:  "134.209.122.181"
  prod:   "134.209.122.181"

name: Continuous Deployment Artemis
# Controls when the workflow will run
on:
  workflow_run:
    workflows: ["ContinuousDelivery"]
    types:
      - completed

  # # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
     inputs:
      deploy_env:
        description: "Deploy Environment"
        required: false
        default: ''
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
 

  deploy-to-dev:
    if: github.event.inputs.deploy_env == '' || github.event.inputs.deploy_env == 'dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Docker swarm
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: root@${{dev}}   #stage
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
          deployment_mode: docker-swarm
          copy_stack_file: true
          deploy_path: /root/
          stack_file_name: artemis.yaml
          keep_files: 5
          args: artemis

  deploy-to-qa:
    needs: deploy-to-stage
    if: github.event.inputs.deploy_env == '' || github.event.inputs.deploy_env == 'qa'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Docker swarm
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: root@${{env.qa}}   #stage
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
          deployment_mode: docker-swarm
          copy_stack_file: true
          deploy_path: /root/
          stack_file_name: artemis.yaml
          keep_files: 5
          args: artemis
  
  
  deploy-to-stage:
    needs: deploy-to-qa
    if: github.event.inputs.deploy_env == '' || github.event.inputs.deploy_env == 'stage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Docker swarm
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: root@${{env.stage}}  #stage
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
          deployment_mode: docker-swarm
          copy_stack_file: true
          deploy_path: /root/
          stack_file_name: artemis.yaml
          keep_files: 5
          args: artemis



  deploy-to-prod:
    if: github.event.inputs.deploy_env == "Prod"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Docker swarm
        uses: wshihadeh/docker-deployment-action@v1
        with:
          remote_docker_host: root@${{env.prod}}  #stage
          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
          deployment_mode: docker-swarm
          copy_stack_file: true
          deploy_path: /root/
          stack_file_name: artemis.yaml
          keep_files: 5
          args: artemis





